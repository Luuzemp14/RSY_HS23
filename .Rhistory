length(unique(apply(user_genre_profile_matrix, 1, paste, collapse = ", ")))
# Länge der unique Userprofiles ausgeben für 1, falls 1 oder höher und 0 sonst
length(unique(apply(user_genre_profile_matrix > 0, 1, paste, collapse = ", ")))
calc_cos_similarity_twomtrx <- function(matrix_1, matrix_2) {
# Berechnung der Normen für beide Matrizen
norms_matrix_1 <- sqrt(rowSums(matrix_1^2))
norms_matrix_2 <- sqrt(rowSums(matrix_2^2))
# Berechnung des äußeren Produkts der Normen
norm_product <- outer(norms_matrix_1, norms_matrix_2, "*")
# Berechnung der Cosinus-Ähnlichkeit
cosine_similarity <- (matrix_1 %*% t(matrix_2)) / norm_product
return(cosine_similarity)
}
# Erstellen von Testmatrizen
matrix_1 <- matrix(c(1,0,2,1,1,0), nrow = 2, ncol = 3, byrow = TRUE)
matrix_2 <- matrix(c(1,1,1,0,1,0), nrow = 2, ncol = 3, byrow = TRUE)
# Funktion mit kleinen Matrizen testen
cos_similarity_eigeneMatrix <- calc_cos_similarity_twomtrx(matrix_1, matrix_2)
# Ausgabe
print(cos_similarity_eigeneMatrix)
# Cosinus-Ähnlichkeit zwischen User-Genre- und Movie-Genre-Matrix berechnen
cosine_similarity_matrix <- calc_cos_similarity_twomtrx(user_genre_profile_matrix, movie_genre_matrix)
# erste 5 Zeilen und Spalten ausgeben
cosine_similarity_matrix[1:5, 1:5]
dim(cosine_similarity_matrix)
# Konvertierung der Matrix in einen Vektor
cos_similarity_vector <- as.vector(cosine_similarity_matrix)
# Berechnung der 5-Zahlen-Statistik
min_value <- min(cos_similarity_vector, na.rm = TRUE)
first_quartile <- quantile(cos_similarity_vector, 0.25, na.rm = TRUE)
median_value <- median(cos_similarity_vector, na.rm = TRUE)
third_quartile <- quantile(cos_similarity_vector, 0.75, na.rm = TRUE)
max_value <- max(cos_similarity_vector, na.rm = TRUE)
# Berechnung des Mittelwerts
mean_value <- mean(cos_similarity_vector, na.rm = TRUE)
# Berechnung der Anzahl von NAs
na_count <- sum(is.na(cos_similarity_vector))
# Ausgabe der Statistiken
cat("5-Zahlen-Statistik der Cosinus-Ähnlichkeiten:\n",
"Minimum:", min_value, "\n",
"1. Quartil:", first_quartile, "\n",
"Median:", median_value, "\n",
"3. Quartil:", third_quartile, "\n",
"Maximum:", max_value, "\n",
"Mittelwert:", mean_value, "\n",
"Anzahl von NAs:", na_count, "\n")
# NA-Werte entfernen aus dem Vektor
cos_similarity_vector <- cos_similarity_vector[!is.na(cos_similarity_vector)]
# Erstellen eines DataFrames für die ggplot2 Funktion
cos_similarity_df <- data.frame(CosineSimilarity = cos_similarity_vector)
# Erstellen des Dichteplots
ggplot(cos_similarity_df, aes(x = CosineSimilarity)) +
geom_density(fill = "orchid", alpha = 0.4) +
labs(title = "Dichteplot der Cosinus-Ähnlichkeiten",
x = "Cosinus-Ähnlichkeit",
y = "Dichte") +
theme_minimal()
user_ids <- c("241", "414", "477", "526", "640", "710")
# Erstellen eines DataFrames für die ggplot2 Funktion
cos_similarity_long_df <- data.frame(CosineSimilarity = numeric(), User = factor())
# Extrahieren der Cosinus-Ähnlichkeitswerte für jeden Nutzer und Hinzufügen zum DataFrame
for (user_id in user_ids) {
user_similarity <- cosine_similarity_matrix[user_id, ]
user_similarity <- user_similarity[!is.na(user_similarity)]  # Entfernen von NA-Werten
cos_similarity_long_df <- rbind(cos_similarity_long_df, data.frame(CosineSimilarity = user_similarity, User = as.factor(user_id)))
}
# Erstellen des Dichteplots mit unterschiedlichen Farben für jeden Nutzer
ggplot(cos_similarity_long_df, aes(x = CosineSimilarity, fill = User)) +
geom_density(alpha = 0.5) +
facet_wrap(~ User, ncol = 2) +
labs(title = "Dichteplot der Cosinus-Ähnlichkeiten für ausgewählte Nutzer",
x = "Cosinus-Ähnlichkeit",
y = "Dichte") +
theme_minimal() +
scale_fill_brewer(palette = "Set1")  # Verwenden einer voreingestellten Farbpalette
# Date Frame erstellen mit User und Filmen, welche ein Rating haben = 1. Sonst = 0
user_watched_df <- dcast(user_item_ratings, user ~ item, value.var = "rating", fill = 0)
# where there is a rating, set it to 1 where not set to 0 exept first col
user_watched_df[, -1] <- ifelse(user_watched_df[, -1] > 0, 1, 0)
# Filme, die nicht bewertet wurden (0), werden zu 1, und bewertete Filme (1) werden zu 0, ausser 1. spalte bleibt gleich
negativabzug_matrix <- user_watched_df
negativabzug_matrix[, -1] <- ifelse(negativabzug_matrix[, -1] == 0, 1, 0)
# Ausgewählte Nutzer-IDs
selected_users <- c("5", "25", "50", "150")
# Berechnung der Zeilensummen für die ausgewählten Nutzer
for (user in selected_users) {
user_row_sum <- sum(negativabzug_matrix[negativabzug_matrix$user == user, -1])
cat("Zeilensumme des Negativabzuges für Nutzer", user, ":", user_row_sum, "\n")
}
# Berechnung der Zeilensummen
zeilensummen <- rowSums(negativabzug_matrix[, -1])
# Berechnung der 5-Zahlen-Statistik
min_value <- min(zeilensummen)
erstes_quartil <- quantile(zeilensummen, 0.25)
median_value <- median(zeilensummen)
drittes_quartil <- quantile(zeilensummen, 0.75)
max_value <- max(zeilensummen)
# Ausgabe der 5-Zahlen-Statistik
cat("5-Zahlen-Statistik der Zeilensummen des Negativabzuges:\n",
"Minimum:", min_value, "\n",
"1. Quartil:", erstes_quartil, "\n",
"Median:", median_value, "\n",
"3. Quartil:", drittes_quartil, "\n",
"Maximum:", max_value, "\n")
# rownames of negativabzug_matrix are the user ids
rownames(negativabzug_matrix) <- negativabzug_matrix$user
# drop user column
negativabzug_matrix <- negativabzug_matrix[, -1]
masked_df <- cosine_similarity_matrix * negativabzug_matrix
masked_df
#masked_df zu matrix umwandeln$
masked_matrix <- as.matrix(masked_df)
dim(masked_matrix)
get_topn_recos <- function(bewertungsmatrix, N = 20) {
top_n_recos <- lapply(1:nrow(bewertungsmatrix), function(row_index) {
row <- bewertungsmatrix[row_index, ]
sorted_indices <- order(row, decreasing = TRUE)
top_n_indices <- head(sorted_indices, N)
names(row)[top_n_indices]
})
names(top_n_recos) <- rownames(bewertungsmatrix)
return(top_n_recos)
}
# Anwenden der Funktion, um die Top-20 Empfehlungen für jeden Nutzer zu erhalten
top_20_recos <- get_topn_recos(masked_matrix, N = 20)
# Berechnung der Länge der Empfehlungslisten für jeden Nutzer
listen_laengen <- sapply(top_20_recos, length)
# Berechnung der 5-Zahlen-Statistik für die Listenlängen
min_listen_laenge <- min(listen_laengen)
erstes_quartil <- quantile(listen_laengen, 0.25)
median_listen_laenge <- median(listen_laengen)
drittes_quartil <- quantile(listen_laengen, 0.75)
max_listen_laenge <- max(listen_laengen)
# Ausgabe der 5-Zahlen-Statistik
cat("5-Zahlen-Statistik der Längen der Top-20 Empfehlungslisten:\n",
"Minimum:", min_listen_laenge, "\n",
"1. Quartil:", erstes_quartil, "\n",
"Median:", median_listen_laenge, "\n",
"3. Quartil:", drittes_quartil, "\n",
"Maximum:", max_listen_laenge, "\n")
# N-Werte definieren
N_values <- c(10, 20, 50, 100)
# Funktion, um die Ähnlichkeit für den Minimalen Score von den vorgeschlagenen Filmen zu erhalten
analyze_topn_recos <- function(recomenation_matrix, N_values) {
all_min_scores <- list()
# Iterieren über die N-Werte
for (N in N_values) {
min_scores <- list()
top_n_scores <- get_topn_recos(recomenation_matrix, N)
# Den letzten Film der Top-N Liste für jeden Nutzer erhalten
last_recommended_movie <- sapply(top_n_scores, function(movies) {
if(length(movies) >= N) {
return(movies[N])  # Der Ähnlichkeitsscore des N-ten Films
} else {
return(NA)  # NA, wenn weniger als N Filme vorhanden sind
}
})
# Iterieren über die Nutzer und deren letzte empfohlene Filme
for (user in names(last_recommended_movie)) {
# Ausgeben der Ähnlichkeit für den schlechtesten vorgeschlagenen Film
min_scores[[user]] <- recomenation_matrix[user, last_recommended_movie[user]]
}
# Speichern der minimalen Scores für dieses N
all_min_scores[[as.character(N)]] <- min_scores
}
return(all_min_scores)
}
# Analyse durchführen
min_scores_analysis <- analyze_topn_recos(masked_matrix, N_values)
# Layout für die Histogramme festlegen
par(mfrow = c(2, 2))  # Anordnung der Plots in 2x2 Matrix
# Für jedes N ein Histogramm erstellen
for (N in N_values) {
min_scores <- unlist(min_scores_analysis[[as.character(N)]])
min_scores <- min_scores[!is.na(min_scores)]  # Entfernen von NA-Werten
# Histogramm für die aktuellen minimalen Ähnlichkeitsscores erstellen
hist(min_scores,
main = paste("N =", N),
xlab = "Minimale Ähnlichkeit",
ylab = "Häufigkeit",
col = "orchid",
breaks = 30)
}
# Titel für die gesamte Grafik erstellen
mtext("Verteilung der Minimalen Ähnlichkeit für verschiedene N-Werte",
side = 3,  # 3 steht für oben
outer = TRUE,  # Der Text soll außerhalb des Plot-Bereichs erscheinen
line = -1)  # Abstand von der obersten Zeile der Plots
create_cleveland_plot <- function(user_ids, top_n_recos, movie_genre_matrix) {
for (user_id in user_ids) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- top_n_recos[[as.character(user_id)]]
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top 20 Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung")
}
}
# Anwenden der Funktion auf eine Liste von ausgewählten Nutzern
user_ids <- c("5", "25", "50", "150")
create_cleveland_plot(user_ids, top_20_recos, movie_genre_matrix)
user_ids <- c("241", "414", "477", "526", "640", "710")
# Erstellen eines DataFrames für die ggplot2 Funktion
cos_similarity_long_df <- data.frame(CosineSimilarity = numeric(), User = factor())
# Extrahieren der Cosinus-Ähnlichkeitswerte für jeden Nutzer und Hinzufügen zum DataFrame
for (user_id in user_ids) {
user_similarity <- cosine_similarity_matrix[user_id, ]
user_similarity <- user_similarity[!is.na(user_similarity)]  # Entfernen von NA-Werten
cos_similarity_long_df <- rbind(cos_similarity_long_df, data.frame(CosineSimilarity = user_similarity, User = as.factor(user_id)))
}
# Erstellen des Dichteplots mit unterschiedlichen Farben für jeden Nutzer
ggplot(cos_similarity_long_df, aes(x = CosineSimilarity, fill = User)) +
geom_density(alpha = 0.5) +
facet_wrap(~ User, ncol = 2) +
labs(title = "Dichteplot der Cosinus-Ähnlichkeiten für ausgewählte Nutzer",
x = "Cosinus-Ähnlichkeit",
y = "Dichte") +
theme_minimal() +
scale_fill_brewer(palette = "PdRd")
user_ids <- c("241", "414", "477", "526", "640", "710")
# Erstellen eines DataFrames für die ggplot2 Funktion
cos_similarity_long_df <- data.frame(CosineSimilarity = numeric(), User = factor())
# Extrahieren der Cosinus-Ähnlichkeitswerte für jeden Nutzer und Hinzufügen zum DataFrame
for (user_id in user_ids) {
user_similarity <- cosine_similarity_matrix[user_id, ]
user_similarity <- user_similarity[!is.na(user_similarity)]  # Entfernen von NA-Werten
cos_similarity_long_df <- rbind(cos_similarity_long_df, data.frame(CosineSimilarity = user_similarity, User = as.factor(user_id)))
}
# Erstellen des Dichteplots mit unterschiedlichen Farben für jeden Nutzer
ggplot(cos_similarity_long_df, aes(x = CosineSimilarity, fill = User)) +
geom_density(alpha = 0.5) +
facet_wrap(~ User, ncol = 2) +
labs(title = "Dichteplot der Cosinus-Ähnlichkeiten für ausgewählte Nutzer",
x = "Cosinus-Ähnlichkeit",
y = "Dichte") +
theme_minimal() +
scale_fill_brewer(palette = "PuRd")
plot
create_cleveland_plot <- function(user_ids, top_n_recos, movie_genre_matrix) {
for (user_id in user_ids) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- top_n_recos[[as.character(user_id)]]
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top 20 Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung")
}
}
# Anwenden der Funktion auf eine Liste von ausgewählten Nutzern
user_ids <- c("5", "25", "50", "150")
plot <- create_cleveland_plot(user_ids, top_20_recos, movie_genre_matrix)
plot
create_cleveland_plot <- function(user_ids, top_n_recos, movie_genre_matrix) {
for (user_id in user_ids) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- top_n_recos[[as.character(user_id)]]
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
plot <- ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top 20 Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung")
print(plot) # Hinzufügen der Print-Funktion
}
}
# Anwenden der Funktion auf eine Liste von ausgewählten Nutzern
user_ids <- c("5", "25", "50", "150")
create_cleveland_plot(user_ids, top_20_recos, movie_genre_matrix)
create_cleveland_plot <- function(user_ids, top_n_recos, movie_genre_matrix) {
for (user_id in user_ids) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- top_n_recos[[as.character(user_id)]]
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
plot <- ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top 20 Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung"),
user_ids <- c("5", "25", "50", "150")
create_cleveland_plot <- function(user_ids, top_n_recos, movie_genre_matrix) {
for (user_id in user_ids) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- top_n_recos[[as.character(user_id)]]
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
plot <- ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top 20 Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung")
print(plot)
}
}
# Anwenden der Funktion auf eine Liste von ausgewählten Nutzern
create_cleveland_plot(user_ids, top_20_recos, movie_genre_matrix)
library(ggplot2)
library(gridExtra)
create_cleveland_plot <- function(user_ids, top_n_recos, movie_genre_matrix) {
# Layout für 4 Plots festlegen (2 Zeilen und 2 Spalten)
par(mfrow = c(2, 2))
for (user_id in user_ids) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- top_n_recos[[as.character(user_id)]]
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
plot <- ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top 20 Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung")
print(plot) # Print-Funktion innerhalb der Schleife
}
# Layout zurücksetzen
par(mfrow = c(1, 1))
}
# Anwenden der Funktion auf eine Liste von ausgewählten Nutzern
user_ids <- c("5", "25", "50", "150")
create_cleveland_plot(user_ids, top_20_recos, movie_genre_matrix)
create_cleveland_plot <- function(user_ids, top_n_recos, movie_genre_matrix) {
par(mfrow = c(2, 1))  # Layout für 2 Plots (2 Zeilen, 1 Spalte)
for (user_id in user_ids) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- top_n_recos[[as.character(user_id)]]
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
plot <- ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top 20 Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung")
print(plot) # Print-Funktion innerhalb der Schleife
}
par(mfrow = c(1, 1))  # Layout zurücksetzen
}
# Anwenden der Funktion auf Nutzer "133" und "555"
user_ids <- c("133", "555")
create_cleveland_plot(user_ids, top_20_recos, movie_genre_matrix)
library(ggplot2)
library(dplyr)
library(tidyr)
# Daten für die Empfehlungen und Nutzerprofile vorbereiten
temp <- recommendations_genres(20, c(133, 555))
# Erweitern der Nutzer- und N-Werte
user_ids_6 <- c("133", "555")
N_values_extended <- c(20, 30, 40, 50)
# Anpassung der Funktion für die erweiterten Nutzer- und N-Werte
create_cleveland_plot_extended <- function(user_ids, N_values, top_n_recos, movie_genre_matrix) {
for (user_id in user_ids_6) {
for (N in N_values) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- get_topn_recos_for_user(user_id, N, top_n_recos)
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
plot <- ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top", N, "Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung")
print(plot)
}
}
}
# Anwenden der angepassten Funktion auf die Nutzer und N-Werte
create_cleveland_plot_extended(user_ids_6, N_values_extended, top_n_recos, movie_genre_matrix)
# Erweitern der Nutzer- und N-Werte
user_ids_6 <- c("133", "555")
N_values_extended <- c(20, 30, 40, 50)
# Anpassung der Funktion für die erweiterten Nutzer- und N-Werte
create_cleveland_plot_extended <- function(user_ids, N_values, top_n_recos, movie_genre_matrix) {
for (user_id in user_ids_6) {
for (N in N_values) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- get_topn_recos(user_id, N, top_n_recos)
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
plot <- ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top", N, "Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung")
print(plot)
}
}
}
# Anwenden der angepassten Funktion auf die Nutzer und N-Werte
create_cleveland_plot_extended(user_ids_6, N_values_extended, top_n_recos, movie_genre_matrix)
# Erweitern der Nutzer- und N-Werte
user_ids_6 <- c("133", "555")
N_values_extended <- c(20, 30, 40, 50)
# Anpassung der Funktion für die erweiterten Nutzer- und N-Werte
create_cleveland_plot_extended <- function(user_ids, N_values, top_n_recos, movie_genre_matrix) {
for (user_id in user_ids_6) {
for (N in N_values) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- get_topn_recos(user_id, N)
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
plot <- ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top", N, "Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung")
print(plot)
}
}
}
# Anwenden der angepassten Funktion auf die Nutzer und N-Werte
create_cleveland_plot_extended(user_ids_6, N_values_extended, top_n_recos, movie_genre_matrix)
# Erweitern der Nutzer- und N-Werte
user_ids <- c("5", "25", "50", "150", "133", "555")
N_values_extended <- c(20, 30, 40, 50)
# Anpassung der Funktion für die erweiterten Nutzer- und N-Werte
create_cleveland_plot_extended <- function(user_ids, N_values, top_n_recos, movie_genre_matrix) {
for (user_id in user_ids) {
for (N in N_values) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- get_topn_recos_for_user(user_id, N, top_n_recos)
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
plot <- ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top", N, "Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung")
print(plot)
}
}
}
# Anwenden der angepassten Funktion auf die Nutzer und N-Werte
create_cleveland_plot_extended(user_ids, N_values_extended, top_n_recos, movie_genre_matrix)
text = "In dieser Challenge wurde teilweise auf KI-Tools zurückgegriffen. Diese sind im Folgenden aufgelistet:
Github Copilot zu unterstützung von schnellerem und effizienterem Programmieren.
Chat-GPT habe ich verwendet um Konzepte zu erläutern und als Hilfestellung bei der Generierung und Optimierung von Code Abschnitten. Vorallem, da ich mit R noch nicht so vertraut bin, war es sehr hilfreich, da ich so die Syntax von R besser verstehen konnte.
Auch habe ich Chat-GPT häfuig dazu verwendet um beispielsweise Funktionen für Wiederholungen zu erstellen. So konnte ich Schleifen erstellen um nicht jedesmal einen funktion für jede User_id oder beispielsweise für verschiedene N-Werte zu erstellen.
Auch habe ich Chat-GPT verwendet um die Funktionen zu kommentieren und zu prüfen. "
word_count = len(text.split())
word_count = length(text.split())
create_cleveland_plot <- function(user_ids, top_n_recos, movie_genre_matrix) {
par(mfrow = c(2, 1))  # Layout für 2 Plots (2 Zeilen, 1 Spalte)
for (user_id in user_ids) {
# Extrahieren der Top-N Empfehlungen für den gegebenen Nutzer
top_movies <- top_n_recos[[as.character(user_id)]]
# Extrahieren der Genres der Top-N Empfehlungen
top_movies_genres <- movie_genre_matrix[top_movies, ]
# Erstellen des Plots
plot_data <- as.data.frame(colMeans(top_movies_genres))
names(plot_data) <- "AverageGenreScore"
plot_data$Genre <- rownames(plot_data)
plot <- ggplot(plot_data, aes(x = reorder(Genre, -AverageGenreScore), y = AverageGenreScore)) +
geom_point() +
coord_flip() +
labs(title = paste("Top 20 Genre Profile für Nutzer", user_id),
x = "Genre", y = "Durchschnittliche Genre-Wertung")
print(plot) # Print-Funktion innerhalb der Schleife
}
par(mfrow = c(1, 1))  # Layout zurücksetzen
}
# Anwenden der Funktion auf Nutzer "133" und "555"
user_ids <- c("133", "555")
create_cleveland_plot(user_ids, top_20_recos, movie_genre_matrix)
